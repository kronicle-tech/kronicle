plugins {
    id "java-library"
    id "io.freefair.lombok"
    id "com.github.johnrengelman.shadow"
}

dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    compileOnly platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testImplementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")

    annotationProcessor "org.pf4j:pf4j:$pf4jVersion"

    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"

    implementation project(":service-plugin-guice")
    implementation project(":service-utils")

    // Resolves performance vulnerability https://github.com/FasterXML/jackson-databind/issues/2816
    // TODO: Remove platform once a version of Spring Boot is released that includes this fix
    implementation platform("com.fasterxml.jackson:jackson-bom:2.13.2.20220324")
    implementation "com.fasterxml.jackson.core:jackson-databind"

    testImplementation project(":service-plugin-test-utils")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation "com.github.tomakehurst:wiremock-jre8:$wireMockVersion"
}

shadowJar {
  minimize {
      exclude(dependency("org.hibernate.validator:hibernate-validator:"))
      exclude(dependency("com.fasterxml.jackson.core:jackson-databind:"))
  }
}

tasks.register("copyPlugin", Copy) {
    dependsOn(shadowJar)

    from shadowJar
    into project(':service').file('plugins')
}

project(":service").tasks.named("copyPlugins") {
    dependsOn(copyPlugin)
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    maxParallelForks = Math.min(2, Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
}
