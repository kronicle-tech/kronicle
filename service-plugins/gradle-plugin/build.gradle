plugins {
    id "java-library"
    id 'io.micronaut.library'
//    id 'jvm-test-suite'
}

//testing {
//    suites {
//        test {
//            useJUnitJupiter()
//        }
//
//        realCodebaseTest(JvmTestSuite) {
//            dependencies {
//                implementation project
//            }
//
//            targets {
//                all {
//                    testTask.configure {
//                        shouldRunAfter(test)
//                    }
//                }
//            }
//        }
//    }
//}

//configurations {
//    testImplementation.extendsFrom implementation
//    testAnnotationProcessor.extendsFrom annotationProcessor
//    testCompileOnly.extendsFrom compileOnly
//    realCodebaseTestImplementation.extendsFrom testImplementation
//    realCodebaseTestAnnotationProcessor.extendsFrom testAnnotationProcessor
//    realCodebaseTestCompileOnly.extendsFrom testCompileOnly
//}

dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    compileOnly platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testImplementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")

    annotationProcessor "org.projectlombok:lombok"
    compileOnly "org.projectlombok:lombok"
    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"
    testAnnotationProcessor "org.projectlombok:lombok"
    testCompileOnly "org.projectlombok:lombok"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"

    annotationProcessor "io.micronaut:micronaut-inject-java:$micronautVersion"
    compileOnly "io.micronaut:micronaut-inject:$micronautVersion"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java:$micronautVersion"
    testCompileOnly "io.micronaut:micronaut-inject:$micronautVersion"

    compileOnly "javax.inject:javax.inject:$javaxInjectApiVersion"
    compileOnly "jakarta.annotation:jakarta.annotation-api"
    compileOnly "jakarta.validation:jakarta.validation-api"
    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"

//    implementation "io.micronaut:micronaut-inject:1.0.0"

    implementation project(":service-core")
    implementation "tech.kronicle:gradle-version-logic:$gradleVersionLogicVersion"
    implementation "org.slf4j:slf4j-api"
    implementation "org.springframework:spring-webflux"
    implementation "io.projectreactor.netty:reactor-netty-http"
    implementation "io.github.resilience4j:resilience4j-retry:$resilience4jVersion"
//    implementation "io.github.resilience4j:resilience4j-micronaut:$resilience4jVersion"
//    implementation "io.github.resilience4j:resilience4j-reactor:$resilience4jVersion"
    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:$jakartaXmlBindVersion"
    implementation "com.sun.xml.bind:jaxb-impl:$jakartaXmlBindVersion"
    implementation "org.codehaus.groovy:groovy:$groovyVersion"
    implementation "com.google.guava:guava:$guavaVersion"

    testCompileOnly "javax.inject:javax.inject:$javaxInjectApiVersion"
    testImplementation project(":service-core-tests")
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation "com.github.tomakehurst:wiremock-jre8:$wireMockVersion"
    testImplementation "io.micronaut.test:micronaut-test-junit5:$micronautTestVersion"
}

//tasks.withType(Test).configureEach {
//    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
//}
//
//tasks.withType(JavaCompile) {
//    options.compilerArgs = [
//            '-Amicronaut.processing.incremental=true',
//            '-Amicronaut.processing.annotations=tech.kronicle.service.*',
//    ]
//}
