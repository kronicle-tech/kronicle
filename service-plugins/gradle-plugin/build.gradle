plugins {
    id "java-library"
    id 'jvm-test-suite'
    id "io.freefair.lombok"
    id "com.github.johnrengelman.shadow"
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }

        realCodebaseTest(JvmTestSuite) {
            dependencies {
                implementation project
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

configurations {
    realCodebaseTestImplementation.extendsFrom testImplementation
    realCodebaseTestAnnotationProcessor.extendsFrom testAnnotationProcessor
    realCodebaseTestCompileOnly.extendsFrom testCompileOnly
}

dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    compileOnly platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testImplementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    shadow platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")

    annotationProcessor "org.pf4j:pf4j:$pf4jVersion"

    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"

    implementation project(":service-core")
    implementation "jakarta.validation:jakarta.validation-api"
    implementation "tech.kronicle:gradle-version-logic:$gradleVersionLogicVersion"
    implementation "org.slf4j:slf4j-api"
    implementation "org.springframework.boot:spring-boot"
    implementation "org.springframework:spring-webflux"
    implementation "io.projectreactor.netty:reactor-netty-http"
    implementation "io.github.resilience4j:resilience4j-retry:$resilience4jVersion"
    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:$jakartaXmlBindVersion"
    implementation "com.sun.xml.bind:jaxb-impl:$jakartaXmlBindVersion"
    implementation "org.codehaus.groovy:groovy:$groovyVersion"
    implementation "com.google.guava:guava:$guavaVersion"

    testImplementation project(":service-core-tests")
    testImplementation "org.springframework.boot:spring-boot-starter-test", {
        exclude group: "junit", module: "junit"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation "com.github.tomakehurst:wiremock-jre8:$wireMockVersion"
}

shadowJar {
    dependencies {
//        exclude(project(":service-core"))
//        exclude(dependency("^org\\.pf4j:"))
//        exclude(dependency("^org\\.springframework:"))
//        exclude(dependency("^org\\.springframework\\.boot:"))
//        exclude(dependency("^javax\\.validation:"))
//        exclude(dependency("^jakarta\\.validation:"))
//        exclude(dependency("^org\\.slf4j:"))
//        include(dependency("^jakarta\\.xml\\.bind:jakarta\\.xml\\.bind-api:"))
//        include(dependency("^com\\.sun\\.xml\\.bind:jaxb-impl:"))
//        include(dependency("^jakarta.*:"))
//        include(dependency("^com\\.sun.*:"))
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    maxParallelForks = Math.min(2, Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
}
