plugins {
    id "java-library"
}

dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    compileOnly platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testImplementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")

    annotationProcessor "org.projectlombok:lombok"
    compileOnly "org.projectlombok:lombok"
    compileOnly "javax.inject:javax.inject:$javaxInjectApiVersion"
    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"

    testAnnotationProcessor "org.projectlombok:lombok"
    testCompileOnly "org.projectlombok:lombok"
    testCompileOnly "javax.inject:javax.inject:$javaxInjectApiVersion"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"

    api project(":common")
    api project(":metadata")
    api "org.hibernate.validator:hibernate-validator"
    api("org.pf4j:pf4j:$pf4jVersion") {
        exclude group: 'org.apache.logging.log4j'
    }
    api "org.springframework:spring-context"
    api "jakarta.annotation:jakarta.annotation-api"
    api "jakarta.validation:jakarta.validation-api"
    implementation "org.springframework:spring-webflux"

    testImplementation project(":service-core-tests")
    testImplementation "org.springframework.boot:spring-boot-starter-test", {
        exclude group: "junit", module: "junit"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation "com.github.tomakehurst:wiremock-jre8:$wireMockVersion"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    maxParallelForks = Math.min(2, Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
}
