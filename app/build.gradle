buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "cz.habarta.typescript-generator:typescript-generator-gradle-plugin:$typescriptGeneratorPluginVersion"
  }
}

plugins {
  id "org.siouan.frontend-jdk11"
  id "com.palantir.docker"
}

apply plugin: "cz.habarta.typescript-generator"

frontend {
  nodeDistributionProvided = true
  assembleScript = "run build"
  cleanScript = "run clean"
  checkScript = "run test"
}

dependencies {
  ["org.springframework.boot:spring-boot-dependencies:$springBootVersion",
   "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"].each {
    annotationProcessor platform(it)
    implementation platform(it)
    compileOnly platform(it)
    testAnnotationProcessor platform(it)
    testImplementation platform(it)
  }

  implementation project(":sdk")
  implementation "org.springframework:spring-core"
}

generateTypeScript {
  jsonLibrary = "jackson2"
  classPatterns = ["com.moneysupermarket.componentcatalog.sdk.models.*"]
  optionalAnnotations = ["org.springframework.lang.Nullable"]
  mapDate = "asString"
  outputFile = "types/component-catalog-service/index.d.ts"
  outputKind = "module"
}

// TODO: According to the plugin's documentation, this should not be needed
cleanFrontend.dependsOn installFrontend
assembleFrontend.dependsOn installFrontend
checkFrontend.dependsOn assembleFrontend

assembleFrontend.dependsOn generateTypeScript

docker {
  name "component-catalog-app:$version"

  if (project.pushImage.toBoolean()) {
    name = "$dockerRegistry/$name"
  }

  buildArgs([VERSION: version])
  tag "latest", name
  copySpec.from(".") {
    exclude ".nuxt"
    exclude "build"
    exclude "build.gradle"
    exclude "coverage"
    exclude "Dockerfile"
    exclude "node_modules"
    exclude "README.md"
  }
  network "host"
}

tasks.dockerPrepare.dependsOn installFrontend
tasks.dockerPrepare.dependsOn generateTypeScript
build.dependsOn tasks.docker
