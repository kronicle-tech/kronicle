name: CI

on:
  push:
    branches:
      - main

jobs:

  ci-main:
    runs-on: ubuntu-latest
    environment: publish
    permissions:
      packages: write
      contents: write

    steps:
      - uses: actions/checkout@v2
        # Based on https://axion-release-plugin.readthedocs.io/en/latest/configuration/ci_servers/#github-actions
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '12'

      - name: Upgrade npm
        run: npm install -g npm@latest

      - name: Get Node.js version
        run: |
          echo "$(node -v)" > node-version.txt

      - name: Get npm version
        run: |
          echo "$(npm -v)" > npm-version.txt

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information for SonarQube, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          extra_tasks=()
          if [[ -v SONAR_TOKEN ]]; then extra_tasks+=('sonarqube'); fi
          ./gradlew service:downloadGradleLibs app:docker service:test app:assembleFrontend "${extra_tasks[@]}" build

      - name: Archive Dependency Check report üóÑÔ∏è
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: dependency-check-report
          path: '**/build/reports/dependency-check-report.html'

      - name: Archive JUnit test reports üóÑÔ∏è
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: junit-test-reports
          path: '**/build/reports/tests/test/**'

      - name: Tag build
        # Based on https://axion-release-plugin.readthedocs.io/en/latest/configuration/ci_servers/#github-actions
        run: ./gradlew release -Prelease.customUsername=${{ github.actor }} -Prelease.customPassword=${{ github.token }}

      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::$(./gradlew currentVersion -q -Prelease.quiet)

      - name: Publish JARs to Maven Central
        run: ./gradlew --no-parallel publish
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images to GitHub Container Registry
        run: ./gradlew -PdockerPushImage=true -PdockerRegistry=ghcr.io/kronicle-tech -PdockerTagSuffix=-pre-release dockerPush

      - name: Log in to Amazon ECR Public
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Push Docker images to Amazon ECR Public
        run: |
          docker pull ghcr.io/kronicle-tech/kronicle-app:${{ steps.get_version.outputs.VERSION }}-pre-release
          docker tag ghcr.io/kronicle-tech/kronicle-app:${{ steps.get_version.outputs.VERSION }}-pre-release ${{ secrets.AMAZON_ECR_REGISTRY }}/kronicle-app:${{ steps.get_version.outputs.VERSION }}-pre-release
          docker push ${{ secrets.AMAZON_ECR_REGISTRY }}/kronicle-app:${{ steps.get_version.outputs.VERSION }}-pre-release
          
          docker pull ghcr.io/kronicle-tech/kronicle-service:${{ steps.get_version.outputs.VERSION }}-pre-release
          docker tag ghcr.io/kronicle-tech/kronicle-service:${{ steps.get_version.outputs.VERSION }}-pre-release ${{ secrets.AMAZON_ECR_REGISTRY }}/kronicle-service:${{ steps.get_version.outputs.VERSION }}-pre-release
          docker push ${{ secrets.AMAZON_ECR_REGISTRY }}/kronicle-service:${{ steps.get_version.outputs.VERSION }}-pre-release
