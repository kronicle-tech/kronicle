plugins {
    id "java-library"
}

group "tech.kronicle"
archivesBaseName = "kronicle-$name"
description "Kronicle metadata library used for verifying that the contents of a Kronicle metdata YAML file is valid"

apply from: "$rootDir/gradle/publish.gradle"

dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    annotationProcessor platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    compileOnly platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    compileOnly platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testAnnotationProcessor platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    testImplementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testImplementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")

    annotationProcessor "org.projectlombok:lombok"
    compileOnly "org.projectlombok:lombok"
    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    api project(':sdk')
    implementation project(':common')
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
    implementation "org.hibernate.validator:hibernate-validator"
    implementation "org.glassfish:javax.el:$expressionLanguageVersion"

    testAnnotationProcessor "org.projectlombok:lombok"
    testCompileOnly "org.projectlombok:lombok"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.mockito:mockito-junit-jupiter"
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}
