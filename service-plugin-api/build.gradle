plugins {
    id "java-library"
    id "io.freefair.lombok"
}

group "tech.kronicle"
archivesBaseName = "kronicle-plugin-api"
description "Kronicle plugin-api library contains interfaces that are implemented by Kronicle plugins"

apply from: "$rootDir/gradle/publish.gradle"

dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    compileOnly platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testImplementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")

    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"

    api project(":sdk")
    api project(":common")
    api "com.fasterxml.jackson.core:jackson-annotations"
    api "jakarta.validation:jakarta.validation-api"
    api "org.hibernate.validator:hibernate-validator"
    api("org.pf4j:pf4j:$pf4jVersion") {
        exclude group: 'org.apache.logging.log4j'
    }

    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.mockito:mockito-junit-jupiter"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    maxParallelForks = Math.min(2, Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
}
