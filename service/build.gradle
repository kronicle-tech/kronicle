plugins {
    id "java"
    id "org.springframework.boot"
    id "io.freefair.lombok"
    id "com.palantir.docker"
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    annotationProcessor platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    compileOnly platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    compileOnly platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    developmentOnly platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    developmentOnly platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testAnnotationProcessor platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    testImplementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testImplementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"

    // See https://github.com/netty/netty/issues/11020 for more information
    runtimeOnly("io.netty:netty-resolver-dns-native-macos::osx-aarch_64")

    implementation project(":service-plugin-guice")
    implementation project(":service-utils")
    implementation project(":tracing-processor")
    implementation "org.springframework.boot:spring-boot-starter-web"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-starter-graphql"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "org.springdoc:springdoc-openapi-webmvc-core:$springdocVersion"

    implementation "jakarta.annotation:jakarta.annotation-api:$jakartaAnnotationVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"
    implementation "org.simondean.partial-response:matcher:$partialResponseVersion"
    implementation "net.logstash.logback:logstash-logback-encoder:$logstashLogbackEncoder"
    implementation "tech.kronicle:gradle-version-logic:$gradleVersionLogicVersion"
    implementation "com.github.ben-manes.caffeine:caffeine:$caffeineVersion"
    implementation project(":spring-graphql-code-first")

    testImplementation project(":service-test-utils")
    testImplementation project(":tracing-processor-test-utils")
    testImplementation "org.springframework.boot:spring-boot-starter-test", {
        exclude group: "junit", module: "junit"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation "org.awaitility:awaitility:$awaitilityVersion"
}

docker {
    name "kronicle-service:$version$dockerTagSuffix"

    if (project.dockerPushImage.toBoolean()) {
        name = "$dockerRegistry/$name"
    }

    buildArgs([VERSION: version])
    tag "latest", name
    copySpec.with(
        copySpec {
            from("build/libs") {
                include("service-${version}.jar")
                rename("service-${version}.jar", "app.jar")
            }
        },
        copySpec {
            from("src/test/java") {
                include("Healthcheck.java")
            }
        },
        copySpec {
            from("plugin-libs") {
                include("*.jar")
                into("plugin-libs")
            }
        },
        copySpec {
            from("plugins") {
                include("*-${version}-all.jar")
                into("plugins")
            }
        }
    )
    network "host"
}

tasks.register("copyPlugins") {}

tasks.named("bootRun") {
    dependsOn tasks.named("copyPlugins")
}

tasks.named("dockerPrepare") {
    dependsOn tasks.named("bootJar")
    dependsOn tasks.named("copyPlugins")
}

tasks.named("build") {
    dependsOn tasks.named("docker")
}

processResources {
    filesMatching("logback-spring.xml") {
        expand(project.properties)
    }
}

springBoot {
    // Include build version and other info in Actuator Info endpoint
    buildInfo()
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    maxParallelForks = Math.min(2, Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
}
