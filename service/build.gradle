plugins {
    id "java"
    id "org.springframework.boot"
    id "com.palantir.docker"
}

sourceSets {
    realCodebaseTest {
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    realCodebaseTestImplementation.extendsFrom testImplementation
    realCodebaseTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task downloadGradleLibs {
    def gradleLibsDir = file("$buildDir/gradle-libs")

    ext {
        downloadUrl = "https://services.gradle.org/distributions/gradle-$gradleLibsVersion-bin.zip"
        jarPatterns = [
                "**/gradle-core-${gradleLibsVersion}.jar",
                "**/gradle-core-api-${gradleLibsVersion}.jar",
                "**/gradle-base-services-${gradleLibsVersion}.jar",
                "**/gradle-dependency-management-${gradleLibsVersion}.jar"
        ]
        extractedJars = fileTree(gradleLibsDir) {
            include jarPatterns
            builtBy "downloadGradleLibs"
        }
    }

    inputs.property "downloadUrl", downloadUrl
    inputs.property "jarPatterns", jarPatterns
    outputs.files extractedJars

    doLast {
        gradleLibsDir.mkdirs()

        File downloadFile = file("$temporaryDir/download.zip")
        new URL(downloadUrl).withInputStream { is ->
            downloadFile.withOutputStream { it << is }
        }

        project.copy {
            from zipTree(downloadFile)
            into gradleLibsDir
            include jarPatterns
            includeEmptyDirs false
            eachFile {
                path = name
            }
        }
    }
}

dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    annotationProcessor platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    compileOnly platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    compileOnly platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    developmentOnly platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    developmentOnly platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testAnnotationProcessor platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    testImplementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testImplementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")

    annotationProcessor "org.projectlombok:lombok"
    compileOnly "org.projectlombok:lombok"
    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    
    testAnnotationProcessor "org.projectlombok:lombok"
    testCompileOnly "org.projectlombok:lombok"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"

    implementation project(":common")
    implementation project(":metadata")
    implementation "org.springframework.boot:spring-boot-starter-web"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.cloud:spring-cloud-starter-sleuth"
    implementation "io.github.resilience4j:resilience4j-spring-boot2:$resilience4jVersion"
    implementation "io.github.resilience4j:resilience4j-reactor:$resilience4jVersion"
    implementation "org.springframework.cloud:spring-cloud-sleuth-zipkin"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "org.springdoc:springdoc-openapi-webmvc-core:$springdocVersion"

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
    implementation "org.simondean.partial-response:matcher:$partialResponseVersion"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:$jakartaXmlBindVersion"
    implementation "com.sun.xml.bind:jaxb-impl:$jakartaXmlBindVersion"
    implementation "org.hibernate.validator:hibernate-validator"
    implementation "org.codehaus.groovy:groovy:$groovyVersion"
    implementation files(downloadGradleLibs)
    implementation "io.swagger.parser.v3:swagger-parser:$swaggerParserVersion"
    implementation "com.google.guava:guava:$guavaVersion"
    implementation "org.apache.commons:commons-lang3:$commonsLang3Version"
    implementation "commons-io:commons-io:$commonsIoVersion"
    implementation "org.apache.commons:commons-math3:$commonsMath3Version"
    implementation "org.eclipse.jgit:org.eclipse.jgit:$jgitVersion"
    implementation "net.logstash.logback:logstash-logback-encoder:$logstashLogbackEncoder"

    testImplementation "org.springframework.boot:spring-boot-starter-test", {
        exclude group: "junit", module: "junit"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation "org.awaitility:awaitility:$awaitilityVersion"
    testImplementation "com.github.tomakehurst:wiremock-jre8:$wireMockVersion"
}

task realCodebaseTest(type: Test) {
    description = 'Runs real codebase tests.'
    group = 'verification'

    testClassesDirs = sourceSets.realCodebaseTest.output.classesDirs
    classpath = sourceSets.realCodebaseTest.runtimeClasspath
    shouldRunAfter test
    useJUnitPlatform()
}

docker {
    name "kronicle-service:$version$dockerTagSuffix"

    if (project.dockerPushImage.toBoolean()) {
        name = "$dockerRegistry/$name"
    }

    buildArgs([VERSION: version])
    tag "latest", name
    copySpec.from("build/libs")
            .include("service-${version}.jar")
            .rename(/service-.*\.jar/, "app.jar")
    network "host"
}

dockerPrepare.dependsOn tasks.bootJar
build.dependsOn tasks.docker

processResources {
    filesMatching("logback-spring.xml") {
        expand(project.properties)
    }
}

springBoot {
    // Include build version and other info in Actuator Info endpoint
    buildInfo()
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}
