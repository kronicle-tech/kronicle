plugins {
    id "java-library"
    id "io.freefair.lombok"
}

dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    compileOnly platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testImplementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")

    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"

    api project(":service-plugin-api")
    api project(":service-utils")
    api "jakarta.xml.bind:jakarta.xml.bind-api:$jakartaXmlBindingVersion"
    api "com.sun.xml.bind:jaxb-impl:$jaxbImplVersion"
    api "com.google.guava:guava:$guavaVersion"
    api "com.google.inject:guice:$guiceVersion"
    api "com.fasterxml.jackson.core:jackson-core"
    api "com.fasterxml.jackson.core:jackson-databind"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation "org.glassfish:javax.el:$expressionLanguageVersion"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    maxParallelForks = Math.min(2, Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
}

tasks.register("syncPluginLibs", Sync) {
    into project(':service').file('plugin-libs')
    from configurations.compileClasspath {
        transitive true
        include "guava-*.jar"
        include "guice-*.jar"
        include "hibernate-validator-*.jar"
        include "jackson-core-*.jar"
        include "jackson-databind-*.jar"
        include "jackson-datatype-jsr310-*.jar"
        include "jakarta.validation-api-*.jar"
        include "jakarta.xml.bind-api-*.jar"
        include "jaxb-impl-*.jar"
        include "kronicle-common-*.jar"
        include "kronicle-plugin-api-*.jar"
        include "kronicle-sdk-*.jar"
        include "kronicle-utils-*.jar"
        include "pf4j-*.jar"
    }
    from project(":common").jar
    from project(":sdk").jar
    from project(":service-plugin-api").jar
    from project(":service-utils").jar
}

tasks.register("syncAllPluginLibs", Sync) {
    description "Sync all dependencies to help with choosing which ones to include in syncPluginLibs task"

    into project(':service').file('all-plugin-libs')
    from configurations.compileClasspath {
        transitive true
        include "*.jar"
    }
}

project(":service").tasks.named("copyPlugins") {
    dependsOn(syncPluginLibs, syncAllPluginLibs)
}
