plugins {
    id "java-library"
    id "io.freefair.lombok"
}

dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    compileOnly platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testImplementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")

    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"

    implementation project(":service-plugin-api")
    // Needed for "org.springframework.util.AntPathMatcher"
    implementation "org.springframework:spring-core"
    implementation "com.fasterxml.jackson.core:jackson-databind"

    testImplementation project(":service-plugin-test-utils")
    testImplementation "org.springframework.boot:spring-boot-starter-test", {
        exclude group: "junit", module: "junit"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation "com.google.guava:guava:$guavaVersion"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    maxParallelForks = Math.min(2, Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
}
